from __future__ import division
import sys
import os
import fnmatch
import re
import stat
import json
import mimetypes
import subprocess
import string
import time
import hashlib
import math

VERSION = "1.0"

JAVASCRIPT_SIGNATURES = []
PHP_SIGNATURES = []
HASH_SIGNATURES = []
HASHTABLE = {}

WMS_DATA_FILE = 'wms_data.json'

WMS_DATA = {
  'status': 'ACTIVE',
  'errors': [],
  'progress': 0,
  'pid': False,
  'results': [],
  'path': ''
}

def writeWMSData():
    with open(WMS_DATA_FILE, 'w') as outfile:
        json.dump(WMS_DATA, outfile)

def checksum(fname):
    hash = hashlib.md5()
    with open(fname, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash.update(chunk)
    return hash.hexdigest()

def isText(filename):
    s=open(filename).read(512)
    text_characters = "".join(map(chr, range(32, 127)) + list("\n\r\t\b"))
    _null_trans = string.maketrans("", "")
    if not s:
        # Empty files are considered text
        return True
    if "\0" in s:
        # Files with null bytes are likely binary
        return False
    # Get the non-text characters (maps a character to itself then
    # use the 'remove' option to get rid of the text characters.)
    t = s.translate(_null_trans, text_characters)
    # If more than 30% non-text characters, then
    # this is considered a binary file
    if float(len(t))/float(len(s)) > 0.30:
        return False
    return True

def FileScan(WebPath):

    totalFiles = 0
    totalScanned = 0

    results = []

    for root, dirnames, filenames in os.walk(WebPath):
        for filename in filenames:
            totalFiles += 1

    for root, dirnames, filenames in os.walk(WebPath):
        for filename in filenames:
            totalScanned += 1

            infected = False

            currentfile = os.path.join(root, filename)
            currentchecksum = checksum(currentfile)
            if currentchecksum in HASHTABLE:
                infected = True

            if infected:
                details = {'filename': os.path.join(root, filename), 'malware': str(HASHTABLE[currentchecksum])}
                results.append(details)

            if isText(currentfile) and not infected:
                fileHandle = open(currentfile, 'r')
                fileData = fileHandle.read()

                malware = ''
                for signatureDefinition in JAVASCRIPT_SIGNATURES:
                    for signature in signatureDefinition["Database_Signatures"]:
                        for signatureExpression in signature["Malware_Signatures"]:
                            try:
                                regexp = re.compile(signatureExpression)
                                if regexp.findall(fileData, re.IGNORECASE):
                                    infected = True
                                    malware = signature["Malware_Name"]
                                    break
                            except:
                                sys.exit()
                        if infected:
                            break
                    if infected:
                        break

                if not infected:
                    malware = ''
                    for signatureDefinition in PHP_SIGNATURES:
                        for signature in signatureDefinition["Database_Signatures"]:
                            for signatureExpression in signature["Malware_Signatures"]:
                                try:
                                    regexp = re.compile(signatureExpression)
                                    if regexp.findall(fileData, re.IGNORECASE):
                                        infected = True
                                        malware = signature["Malware_Name"]
                                        break
                                except:
                                    sys.exit()
                            if infected:
                                break
                        if infected:
                            break

                if infected:
                    details = {'filename': os.path.join(root, filename), 'malware': malware}
                    results.append(details)

    # Scan for insecure permissions
    folders = [x[0] for x in os.walk(WebPath)]
    for folder in folders:
        if os.path.isdir(folder):
            mode = oct(stat.S_IMODE(os.stat(folder).st_mode))
            mode = str(mode)
            if mode.endswith('7') or mode.endswith('6') or mode.endswith('3') or mode.endswith('2'):
                details = {'filename': folder, 'malware': "Insecure permissions ("+str(mode)+")" }
                results.append(details)

    sys.exit()

def LoadSignatures(SignaturesPath):
    # Load signatures for PHP files
    totalDatabases = 0
    loadedDatabases = 0
    for root, dirnames, filenames in os.walk(SignaturesPath):
        for filename in filenames:
            totalDatabases += 1

    for root, dirnames, filenames in os.walk(SignaturesPath+"/php/"):
        for filename in fnmatch.filter(filenames, '*.json'):
            try:
                signature = json.loads(open(os.path.join(root, filename)).read())
                PHP_SIGNATURES.append(signature)
                loadedDatabases += 1
                progressBar(loadedDatabases, totalDatabases, "Loading signature database...")
            except IOError:
                sys.exit()

    # Load signatures for Javscript files
    for root, dirnames, filenames in os.walk(SignaturesPath+"/js/"):
        for filename in fnmatch.filter(filenames, '*.json'):
            try:
                signature = json.loads(open(os.path.join(root, filename)).read())
                JAVASCRIPT_SIGNATURES.append(signature)
                loadedDatabases += 1
                progressBar(loadedDatabases, totalDatabases, "Loading signature database...")
            except IOError:
                sys.exit()

    # Load signatures for MD5 hashes
    for root, dirnames, filenames in os.walk(SignaturesPath+"/checksum/"):
        for filename in fnmatch.filter(filenames, '*.json'):
            try:
                signatures = json.loads(open(os.path.join(root, filename)).read())
                HASH_SIGNATURES.append(signatures)
                loadedDatabases += 1
                progressBar(loadedDatabases, totalDatabases, "Loading signature database...")
            except IOError:
                sys.exit()

    for signature in HASH_SIGNATURES:
        for signatureHash in signature["Database_Hash"]:
            HASHTABLE[signatureHash["Malware_Hash"]] = signatureHash["Malware_Name"]

if len(sys.argv) == 2:
    SignaturesPath = "./signatures/"
    if os.path.isdir(SignaturesPath):
        LoadSignatures(SignaturesPath)
    else:
        sys.exit()

    WebPath = sys.argv[1]
    if os.path.isdir(WebPath):
        FileScan(WebPath)
    else:
        sys.exit()

else:
    sys.exit()
