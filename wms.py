from __future__ import division
import sys
import os
import fnmatch
import re
import stat
import json
import mimetypes
import subprocess
import string

VERSION = "0.2"

JAVASCRIPT_SIGNATURES = []
PHP_SIGNATURES = []

def isText(filename):
    s=open(filename).read(512)
    text_characters = "".join(map(chr, range(32, 127)) + list("\n\r\t\b"))
    _null_trans = string.maketrans("", "")
    if not s:
        # Empty files are considered text
        return True
    if "\0" in s:
        # Files with null bytes are likely binary
        return False
    # Get the non-text characters (maps a character to itself then
    # use the 'remove' option to get rid of the text characters.)
    t = s.translate(_null_trans, text_characters)
    # If more than 30% non-text characters, then
    # this is considered a binary file
    if float(len(t))/float(len(s)) > 0.30:
        return False
    return True

def pmsg(msg, code = 'info'):
    class bcolors:
        HEADER = '\033[95m'
        OKBLUE = '\033[94m'
        OKGREEN = '\033[92m'
        WARNING = '\033[93m'
        FAIL = '\033[91m'
        ENDC = '\033[0m'
        BOLD = '\033[1m'
        UNDERLINE = '\033[4m'
    colorcode = bcolors.OKGREEN
    if code == 'warning':
        colorcode = bcolors.WARNING
    if code == 'error':
        colorcode = bcolors.FAIL
    print bcolors.OKBLUE + bcolors.UNDERLINE + ">>" + bcolors.ENDC + " " + colorcode + msg + bcolors.ENDC

def FileScan(WebPath):
    pmsg("Scanning: " + WebPath)

    totalInfected = 0
    totalInsecure = 0

    for root, dirnames, filenames in os.walk(WebPath):
        for filename in filenames:
            currentfile = os.path.join(root, filename)
            if isText(currentfile):
                fileHandle = open(currentfile, 'r')
                fileData = fileHandle.read()

                infected = False

                for signatureDefinition in JAVASCRIPT_SIGNATURES:
                    for signature in signatureDefinition["Malware_Signatures"]:
                        regexp = re.compile(signature)
                        if regexp.findall(fileData, re.IGNORECASE):
                            infected = True
                            break
                    if infected:
                        break

                if infected:
                    pmsg("Infected javascript file found: "+os.path.join(root, filename), "warning")
                    totalInfected += 1

                if not infected:
                    for signatureDefinition in PHP_SIGNATURES:
                        for signature in signatureDefinition["Malware_Signatures"]:
                            regexp = re.compile(signature)
                            if regexp.findall(fileData, re.IGNORECASE):
                                infected = True
                                break
                        if infected:
                            break

                    if infected:
                        pmsg("Infected php file found: "+os.path.join(root, filename), "warning")
                        totalInfected += 1


    # Scan for insecure permissions
    pmsg("Scanning for insecure permissions...")
    folders = [x[0] for x in os.walk(WebPath)]
    for folder in folders:
        if os.path.isdir(folder):
            mode = oct(stat.S_IMODE(os.stat(folder).st_mode))
            mode = str(mode)
            if mode.endswith('7'):
                pmsg("Insecure permission ("+str(mode)+") found on: "+folder, "warning")
                totalInsecure += 1

    colorcode = "info"
    if totalInfected > 0 or totalInsecure > 0:
        colorcode = "error"
    pmsg("Scan completed. Found "+str(totalInfected)+" infected file(s). Found "+str(totalInsecure)+" insecure permission(s).", colorcode)

def LoadSignatures(SignaturesPath):
    # Load signatures for PHP files
    for root, dirnames, filenames in os.walk(SignaturesPath+"/php/"):
        for filename in fnmatch.filter(filenames, '*.json'):
            try:
                signature = json.loads(open(os.path.join(root, filename)).read())
                PHP_SIGNATURES.append(signature)
            except IOError:
                pmsg("Unable to load signature file: " + filename, "error")

    # Load signatures for Javscript files
    for root, dirnames, filenames in os.walk(SignaturesPath+"/js/"):
        for filename in fnmatch.filter(filenames, '*.json'):
            try:
                signature = json.loads(open(os.path.join(root, filename)).read())
                JAVASCRIPT_SIGNATURES.append(signature)
            except IOError:
                pmsg("Unable to load signature file: " + filename, "error")

if len(sys.argv) == 2:
    pmsg("Web Malware Scanner v"+VERSION)

    pmsg("Loading signature database...")
    SignaturesPath = "./signatures/"
    if os.path.isdir(SignaturesPath):
        LoadSignatures(SignaturesPath)
    else:
        pmsg("Unable to find signatures database folder ("+SignaturesPath+"). Please check path.", "error")
        sys.exit()

    WebPath = sys.argv[1]
    if os.path.isdir(WebPath):
        FileScan(WebPath)
    else:
        pmsg("Unable to find web installation folder ("+WebPath+"). Please check path.", "error")
else:
    pmsg("Usage: python wms.py /path/to/web/installations")
